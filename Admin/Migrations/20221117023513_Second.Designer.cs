// <auto-generated />
using System;
using Admin.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Admin.Migrations
{
    [DbContext(typeof(AdminDbContext))]
    [Migration("20221117023513_Second")]
    partial class Second
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Admin.Models.AboutUs", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("about_detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("about_heading")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("AboutUs");
                });

            modelBuilder.Entity("Admin.Models.Careers", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("career_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("career_detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("career_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("closing_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("hiring")
                        .HasColumnType("int");

                    b.Property<bool>("is_active")
                        .HasColumnType("bit");

                    b.Property<string>("location")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Careers");
                });

            modelBuilder.Entity("Admin.Models.Category_customer", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("category_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.ToTable("Category_Customers");
                });

            modelBuilder.Entity("Admin.Models.Category_partner", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("category_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.ToTable("Category_partners");
                });

            modelBuilder.Entity("Admin.Models.Customers", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("category_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("customer_detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("customer_logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("customer_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("category_id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Admin.Models.Events", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("event_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("event_detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("event_heading")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Admin.Models.Partners", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("category_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("partner_detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("partner_logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("partner_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("category_id");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("Admin.Models.SolutionDetail", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("solution_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("solution_id");

                    b.ToTable("SolutionDetails");
                });

            modelBuilder.Entity("Admin.Models.Solutions", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("solution_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("solution_type_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("solution_type_id");

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("Admin.Models.SolutionsType", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("type_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("SolutionsType");
                });

            modelBuilder.Entity("Admin.Models.Customers", b =>
                {
                    b.HasOne("Admin.Models.Category_customer", "category_customer")
                        .WithMany("Customers")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category_customer");
                });

            modelBuilder.Entity("Admin.Models.Partners", b =>
                {
                    b.HasOne("Admin.Models.Category_partner", "category_partner")
                        .WithMany("Partners")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category_partner");
                });

            modelBuilder.Entity("Admin.Models.SolutionDetail", b =>
                {
                    b.HasOne("Admin.Models.Solutions", "solutions")
                        .WithMany("SolutionDetail")
                        .HasForeignKey("solution_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("solutions");
                });

            modelBuilder.Entity("Admin.Models.Solutions", b =>
                {
                    b.HasOne("Admin.Models.SolutionsType", "solutions_type")
                        .WithMany("Solutions")
                        .HasForeignKey("solution_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("solutions_type");
                });

            modelBuilder.Entity("Admin.Models.Category_customer", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Admin.Models.Category_partner", b =>
                {
                    b.Navigation("Partners");
                });

            modelBuilder.Entity("Admin.Models.Solutions", b =>
                {
                    b.Navigation("SolutionDetail");
                });

            modelBuilder.Entity("Admin.Models.SolutionsType", b =>
                {
                    b.Navigation("Solutions");
                });
#pragma warning restore 612, 618
        }
    }
}
